פרויקט:
יצירת תחנת מים ושרת מסד נתונים שמדברת עם תחנות המים

השרת יאפשר לתחנות מים חדשות להתחבר אליו.
עבור כל תחנת מים שמחוברת אליו, כל דקה השרת שולח בקשת "keep alive"
כל תחנת מים כשהיא מקבלת keep alive היא שולחת בחזרה מידע שכולל את:
1) ה-ID של תחנת המים
2) תאריך ושעה נוכחיים
3) מצב האזעקה
4)מצב גלאי המים

מצב תחנת המים ייקבע לפי קובץ טקסט שיכיל מידע על מצב המים ומצב האזעקה (0 או 1 לכל מצב)

כשהשרת מקבל עדכון מתחנת המים הוא מעדכן את ה-database שלו בהתאם.
שאר ההוראות וקובץ DB ניתן למצוא באתר:
http://www.rt-ed.co.il/python-scripting/


שרת מסד הנתונים ייוצג ע"י הקובץ server.py ותכתוב את המידע שלה לקובץ מסד הנתונים data.db
 שיהיה מסוג sqlite3.
 
 תחנת מיים תיוצג ע"י הקובץ client.py ותקרא את המידע שלה מקובץ status.txt. הקובץ יעודכן 
 באופן ידני (למשל ע"י gedit)
 
 מסד הנתונים יכיל את הטבלה statio_status על פי השאילתה הבא:
 CREATE TABLE IF NOT EXISTS station_status (
	station_id INT,
	last_date TEXT,
	alarm1 INT,
	alarm2 INT,
	PRIMARY KEY(station_id) );
	
כאשר station_id היא מספר מזהה של התחנה שדווחה,
ו- last_date זה תאריך הדיווח האחרון על פי הפורמט "YYYY-MM-DD HH:mm". ניתן לקבלו ע"י הפקודה בפייתון:
import datetime

datetime.datetime.now().strftime('%Y-%M-%d %H:%m')

ו-alarm1 זה מצב אזעקה 1 (הערך שלו אמור להיות 1 אם האזעקה דלוקה או 0 אם היא לא)
ו-alarm1 זה מצב אזעקה 2 (הערך שלו אמור להיות 1 אם האזעקה דלוקה או 0 אם היא לא)
 
קובץ הטקסט status.txt יכיל שלוש שורות. השורה הראשונה תכיל את ה-station_id (מספר int כלשהו)
השורה השנייה תכיל את מצב אזעקה1 (הטקסט 0 או הטקסט 1).
והשורה השלישית תכיל את מצב אזעקה2 (הטקסט 0 או הטקסט 1)
למשל עבור הערכים:
123
0
1

מדובר בתחנה מספר 123, אזעקה 1 כבויה (0) ואזעקה 2 דלוקה (1)
ניתן לערוך את קובץ הטקסט עם gedit למשל ולשמור, וכש-client.py ייפתח ויקרא את הקובץ הוא ייעזר בו
כדי לשלוח את המידע לשרת.
  
את המידע לשרת אפשר לשלוח בסגנון של המחרוזת הבאה:
"ID DATE TIME ALARM1 ALARM2"
למשל:
example:
"123 2017-08-01 20:15 1 0"
אם נפצל את הטקסט הזה בצד השרת עם split נקבל 5 מחרוזות ברשימה
0 -> ה-id
id = x[0]
1 ביחד עם 2 -> התאריך והשעה
last_date = x[1] + " " + x[2]
3 -> אזעקה 1
alarm1 = x[3]
4-> אזעקה 2
alarm2 = x[4]
לכל תחנת מים תיוצג במסד הנתונים כשורה אחת בלבד שתתעדכן ע"י server.py.
כדי לעדכן את השורות של מסד הנתונים ניתן להשתמש ב-insert or replace:
q = """
insert or replace into station_status
values (?, ?, ?, ?)
"""

conn.execute(q, (id, dt, a1, a2))


 להלן דיאגרמה לדוגמה של זרימת הקוד והמידע:
 

data.db                  server.py                client.py   status.txt
-------                  ---------                ---------   ----------
table:station                  
 
id|date|alarm1|alarm2 <- create table 
                          LOOP:
         client_list  <--  accept   <----------- connect

                           time.sleep(60)
                           send ---"keep alive"---> recv
                                                   
                                                   open...  <--             
                                                   
insert or replace...  <-   recv <--              --- send 
                              "123 2017-08-01 20:15 1 0"
 
                         REPEAT LOOP
                         
